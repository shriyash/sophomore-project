package io.realm;


import android.util.JsonReader;
import io.realm.exceptions.RealmException;
import io.realm.internal.ImplicitTransaction;
import io.realm.internal.RealmObjectProxy;
import io.realm.internal.RealmProxyMediator;
import io.realm.internal.Table;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Map;
import org.json.JSONException;
import org.json.JSONObject;
import com.sophomoreproject.expensetracker.entities.Category;
import com.sophomoreproject.expensetracker.entities.Expense;
import com.sophomoreproject.expensetracker.entities.Reminder;

@io.realm.annotations.RealmModule
class DefaultRealmModuleMediator extends RealmProxyMediator {

    private static final List<Class<? extends RealmObject>> MODEL_CLASSES;
    static {
        List<Class<? extends RealmObject>> modelClasses = new ArrayList<Class<? extends RealmObject>>();
        modelClasses.add(Reminder.class);
        modelClasses.add(Expense.class);
        modelClasses.add(Category.class);
        MODEL_CLASSES = Collections.unmodifiableList(modelClasses);
    }

    @Override
    public Table createTable(Class<? extends RealmObject> clazz, ImplicitTransaction transaction) {
        checkClass(clazz);

        if (clazz.equals(Reminder.class)) {
            return ReminderRealmProxy.initTable(transaction);
        } else if (clazz.equals(Expense.class)) {
            return ExpenseRealmProxy.initTable(transaction);
        } else if (clazz.equals(Category.class)) {
            return CategoryRealmProxy.initTable(transaction);
        } else {
            throw getMissingProxyClassException(clazz);
        }
    }

    @Override
    public void validateTable(Class<? extends RealmObject> clazz, ImplicitTransaction transaction) {
        checkClass(clazz);

        if (clazz.equals(Reminder.class)) {
            ReminderRealmProxy.validateTable(transaction);
        } else if (clazz.equals(Expense.class)) {
            ExpenseRealmProxy.validateTable(transaction);
        } else if (clazz.equals(Category.class)) {
            CategoryRealmProxy.validateTable(transaction);
        } else {
            throw getMissingProxyClassException(clazz);
        }
    }

    @Override
    public List<String> getFieldNames(Class<? extends RealmObject> clazz) {
        checkClass(clazz);

        if (clazz.equals(Reminder.class)) {
            return ReminderRealmProxy.getFieldNames();
        } else if (clazz.equals(Expense.class)) {
            return ExpenseRealmProxy.getFieldNames();
        } else if (clazz.equals(Category.class)) {
            return CategoryRealmProxy.getFieldNames();
        } else {
            throw getMissingProxyClassException(clazz);
        }
    }

    @Override
    public String getTableName(Class<? extends RealmObject> clazz) {
        checkClass(clazz);

        if (clazz.equals(Reminder.class)) {
            return ReminderRealmProxy.getTableName();
        } else if (clazz.equals(Expense.class)) {
            return ExpenseRealmProxy.getTableName();
        } else if (clazz.equals(Category.class)) {
            return CategoryRealmProxy.getTableName();
        } else {
            throw getMissingProxyClassException(clazz);
        }
    }

    @Override
    public <E extends RealmObject> E newInstance(Class<E> clazz) {
        checkClass(clazz);

        if (clazz.equals(Reminder.class)) {
            return clazz.cast(new ReminderRealmProxy());
        } else if (clazz.equals(Expense.class)) {
            return clazz.cast(new ExpenseRealmProxy());
        } else if (clazz.equals(Category.class)) {
            return clazz.cast(new CategoryRealmProxy());
        } else {
            throw getMissingProxyClassException(clazz);
        }
    }

    @Override
    public List<Class<? extends RealmObject>> getModelClasses() {
        return MODEL_CLASSES;
    }

    @Override
    public Map<String, Long> getColumnIndices(Class<? extends RealmObject> clazz) {
        checkClass(clazz);

        if (clazz.equals(Reminder.class)) {
            return ReminderRealmProxy.getColumnIndices();
        } else if (clazz.equals(Expense.class)) {
            return ExpenseRealmProxy.getColumnIndices();
        } else if (clazz.equals(Category.class)) {
            return CategoryRealmProxy.getColumnIndices();
        } else {
            throw getMissingProxyClassException(clazz);
        }
    }

    @Override
    public <E extends RealmObject> E copyOrUpdate(Realm realm, E obj, boolean update, Map<RealmObject, RealmObjectProxy> cache) {
        // This cast is correct because obj is either 
        // generated by RealmProxy or the original type extending directly from RealmObject
        @SuppressWarnings("unchecked") Class<E> clazz = (Class<E>) ((obj instanceof RealmObjectProxy) ? obj.getClass().getSuperclass() : obj.getClass());

        if (clazz.equals(Reminder.class)) {
            return clazz.cast(ReminderRealmProxy.copyOrUpdate(realm, (Reminder) obj, update, cache));
        } else if (clazz.equals(Expense.class)) {
            return clazz.cast(ExpenseRealmProxy.copyOrUpdate(realm, (Expense) obj, update, cache));
        } else if (clazz.equals(Category.class)) {
            return clazz.cast(CategoryRealmProxy.copyOrUpdate(realm, (Category) obj, update, cache));
        } else {
            throw getMissingProxyClassException(clazz);
        }
    }

    @Override
    public <E extends RealmObject> E createOrUpdateUsingJsonObject(Class<E> clazz, Realm realm, JSONObject json, boolean update)
        throws JSONException {
        checkClass(clazz);

        if (clazz.equals(Reminder.class)) {
            return clazz.cast(ReminderRealmProxy.createOrUpdateUsingJsonObject(realm, json, update));
        } else if (clazz.equals(Expense.class)) {
            return clazz.cast(ExpenseRealmProxy.createOrUpdateUsingJsonObject(realm, json, update));
        } else if (clazz.equals(Category.class)) {
            return clazz.cast(CategoryRealmProxy.createOrUpdateUsingJsonObject(realm, json, update));
        } else {
            throw getMissingProxyClassException(clazz);
        }
    }

    @Override
    public <E extends RealmObject> E createUsingJsonStream(Class<E> clazz, Realm realm, JsonReader reader)
        throws IOException {
        checkClass(clazz);

        if (clazz.equals(Reminder.class)) {
            return clazz.cast(ReminderRealmProxy.createUsingJsonStream(realm, reader));
        } else if (clazz.equals(Expense.class)) {
            return clazz.cast(ExpenseRealmProxy.createUsingJsonStream(realm, reader));
        } else if (clazz.equals(Category.class)) {
            return clazz.cast(CategoryRealmProxy.createUsingJsonStream(realm, reader));
        } else {
            throw getMissingProxyClassException(clazz);
        }
    }

}
